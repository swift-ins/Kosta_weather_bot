import os
import telebot
import requests
from datetime import datetime, timedelta
import pytz
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY", '1f30db42752361354d4cf1f02835861e')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
weather_cache = {}
CACHE_EXPIRATION = timedelta(minutes=30)

def get_weather(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"weather_{city}"
    if cache_key in weather_cache:
        cached_data = weather_cache[cache_key]
        if datetime.now() - cached_data['timestamp'] < CACHE_EXPIRATION:
            return cached_data['temperature']
    
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            temperature = data['main']['temp']
            weather_cache[cache_key] = {
                'temperature': temperature,
                'timestamp': datetime.now()
            }
            return temperature
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}")
    return None

def get_forecast(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OPENWEATHER_API_KEY}&units=metric"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            tomorrow = datetime.now() + timedelta(days=1)
            target_time = tomorrow.replace(hour=datetime.now().hour, minute=0, second=0, microsecond=0)
            
            for forecast in data['list']:
                forecast_time = datetime.strptime(forecast['dt_txt'], '%Y-%m-%d %H:%M:%S')
                if forecast_time.date() == target_time.date() and forecast_time.hour == target_time.hour:
                    return forecast['main']['temp']
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {city}: {response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
    return None

def get_local_time(city_timezone):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        timezone = pytz.timezone(city_timezone)
        return datetime.now(timezone).strftime('%Y-%m-%d %H:%M:%S')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {city_timezone}: {str(e)}")
        return "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.reply_to(message, 
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö. "
        "–ù–∞–ø–∏—à–∏—Ç–µ /w –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

@bot.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    bot.reply_to(message,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/w - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –∏ –≤—Ä–µ–º–µ–Ω–∏\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")

@bot.message_handler(commands=['w'])
def weather(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /w - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        cities = [
            ('–ú–æ—Å–∫–≤–∞', 'Europe/Moscow'),
            ('–†–∏–≥–∞', 'Europe/Riga'),
            ('–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å', 'Europe/Simferopol')
        ]
        
        weather_data = []
        forecast_data = []
        
        for city, timezone in cities:
            # –í—Ä–µ–º—è
            current_time = get_local_time(timezone)
            
            # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
            temp = get_weather(city)
            temp_text = f"{temp}¬∞C" if temp is not None else "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            weather_data.append(f"  - {city}: {current_time}, {temp_text}")
            
            # –ü—Ä–æ–≥–Ω–æ–∑
            forecast = get_forecast(city)
            if forecast is not None:
                forecast_data.append(f"  - {city}: {forecast}¬∞C")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            "‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:\n" +
            "\n".join(weather_data) +
            "\n\nüå§ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n" +
            ("\n".join(forecast_data) if forecast_data else "–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"))
        
        bot.send_message(message.chat.id, response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ weather: {str(e)}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è Render
def run_webhook():
    from flask import Flask, request
    app = Flask(__name__)
    
    WEBHOOK_URL = os.getenv('WEBHOOK_URL')
    if not WEBHOOK_URL:
        logger.warning("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")
        return bot.polling()
    
    @app.route('/webhook', methods=['POST'])
    def webhook():
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            return ''
        return 'Bad request', 400
    
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
    
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –∑–∞–ø—É—Å–∫–∞
    if os.getenv('RENDER'):
        run_webhook()
    else:
        bot.polling()