import os
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv
from flask import Flask, request
import telebot

# === –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ ===
CITIES = ['–ú–æ—Å–∫–≤–∞', '–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å', '–†–∏–≥–∞', '–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥']


# === –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
load_dotenv()
API_KEY = os.getenv("API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

USE_WEBHOOK = bool(WEBHOOK_URL)  # –ï—Å–ª–∏ –µ—Å—Ç—å URL ‚Äî –∑–Ω–∞—á–∏—Ç —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ webhook

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__) if USE_WEBHOOK else None

# === –§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã ===
    
def get_weather_report0(city):
    output = f"=== {city} ===\n"

    # --- –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ ---
    weather_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"
    weather_resp = requests.get(weather_url).json()

    if 'main' in weather_resp:
        desc = weather_resp['weather'][0]['description'].capitalize()
        temp = weather_resp['main']['temp']
        
        # –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è
        timezone_offset = weather_resp.get('timezone', 0)
        local_time = datetime.utcnow() + timedelta(seconds=timezone_offset)
        time_str = local_time.strftime('%Y-%m-%d %H:%M')

        output += f"–ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}\n"
        output += f"–°–µ–π—á–∞—Å: {desc}, {temp}¬∞C\n"
    else:
        return f"{city}: –æ—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {weather_resp.get('message', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"

    # --- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ---
    forecast_url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric&lang=ru"
    forecast_resp = requests.get(forecast_url).json()

    if 'list' in forecast_resp:
        tomorrow = datetime.utcnow() + timedelta(days=1)
        tomorrow_str = tomorrow.strftime('%Y-%m-%d')

        output += "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
        found = False
        for entry in forecast_resp['list']:
            if entry['dt_txt'].startswith(tomorrow_str):
                time = entry['dt_txt'][11:16]
                desc = entry['weather'][0]['description'].capitalize()
                temp = entry['main']['temp']
                output += f"{time} ‚Äî {desc}, {temp}¬∞C\n"
                found = True

        if not found:
            output += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n"
    else:
        output += "–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: " + forecast_resp.get('message', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö') + "\n"

    return output.strip()
    
    
def get_weather_report(city):
    output = f"=== {city} ===\n"

    # --- –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ ---
    weather_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"
    weather_resp = requests.get(weather_url).json()

    if 'main' in weather_resp:
        desc = weather_resp['weather'][0]['description'].capitalize()
        temp = weather_resp['main']['temp']
        
        # –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–ø–æ timezone –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã)
        timezone_offset = weather_resp.get('timezone', 0)
        local_time = datetime.utcnow() + timedelta(seconds=timezone_offset)
        time_str = local_time.strftime('%Y-%m-%d %H:%M')

        output += f"–ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}\n"
        output += f"–°–µ–π—á–∞—Å: {desc}, {temp}¬∞C\n"
    else:
        return f"{city}: –æ—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {weather_resp.get('message', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"

    # --- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ---
    forecast_url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric&lang=ru"
    forecast_resp = requests.get(forecast_url).json()

    if 'list' in forecast_resp:
        output += "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
        found = False

        # –ü–æ–ª—É—á–∞–µ–º timezone –∏–∑ forecast (–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–Ω–µ–µ)
        timezone_offset = forecast_resp.get('city', {}).get('timezone', timezone_offset)

        # –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å)
        tomorrow = datetime.utcnow() + timedelta(days=1)
        tomorrow_date = tomorrow.date()

        for entry in forecast_resp['list']:
            utc_dt = datetime.utcfromtimestamp(entry['dt'])
            local_dt = utc_dt + timedelta(seconds=timezone_offset)

            if local_dt.date() == tomorrow_date:
                time = local_dt.strftime('%H:%M')
                desc = entry['weather'][0]['description'].capitalize()
                temp = entry['main']['temp']
                output += f"{time} ‚Äî {desc}, {temp}¬∞C\n"
                found = True

        if not found:
            output += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n"
    else:
        output += "–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: " + forecast_resp.get('message', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö') + "\n"

    return output.strip()
   


   

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /weather ===
@bot.message_handler(commands=['start', 'weather'])
def send_weather(message):
    bot.send_message(message.chat.id, "–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    report = ""
    for city in CITIES:
        report += get_weather_report(city) + "\n\n"

    bot.send_message(message.chat.id, report.strip())

# === POLLING —Ä–µ–∂–∏–º ===

if not USE_WEBHOOK:
    print("‚öôÔ∏è  –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling")
#    bot.remove_webhook()  # <<< –í–∞–∂–Ω–æ!
    bot.infinity_polling()


# === WEBHOOK —Ä–µ–∂–∏–º ===
if USE_WEBHOOK:
    print(f"üåê –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook: {WEBHOOK_URL}")

    @app.route(f"/{BOT_TOKEN}", methods=['POST'])
    def webhook():
        update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
        bot.process_new_updates([update])
        return "OK", 200

    @app.route("/", methods=["GET"])
    def index():
        return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    @app.before_request
    def set_webhook():
        bot.remove_webhook()
        bot.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")

    if __name__ == "__main__":
        app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
